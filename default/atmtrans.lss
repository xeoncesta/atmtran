
atmtrans.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000064  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000000d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000118  00000000  00000000  000000f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000b1  00000000  00000000  0000020b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000014e  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c7  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000048  00000000  00000000  000004f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	15 c0       	rjmp	.+42     	; 0x60 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include<avr/io.h>
#include<util/delay.h>

void main()
{
UBRRL=51;
  38:	83 e3       	ldi	r24, 0x33	; 51
  3a:	89 b9       	out	0x09, r24	; 9
UCSRB=(1<<TXEN)|(1<<RXEN);
  3c:	88 e1       	ldi	r24, 0x18	; 24
  3e:	8a b9       	out	0x0a, r24	; 10
UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  40:	86 e8       	ldi	r24, 0x86	; 134
  42:	80 bd       	out	0x20, r24	; 32
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  44:	28 ea       	ldi	r18, 0xA8	; 168
  46:	31 e6       	ldi	r19, 0x61	; 97
while((UCSRA&(1<<RXC))==0);
a=UDR;
_delay_ms(100);
UDR=a;
while((UCSRA&(1<<TXC))==0);
UCSRA=1<<TXC;
  48:	90 e4       	ldi	r25, 0x40	; 64
UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);

while(1)
{
char a;
while((UCSRA&(1<<RXC))==0);
  4a:	5f 9b       	sbis	0x0b, 7	; 11
  4c:	fe cf       	rjmp	.-4      	; 0x4a <__SREG__+0xb>
a=UDR;
  4e:	8c b1       	in	r24, 0x0c	; 12
  50:	f9 01       	movw	r30, r18
  52:	31 97       	sbiw	r30, 0x01	; 1
  54:	f1 f7       	brne	.-4      	; 0x52 <__SREG__+0x13>
_delay_ms(100);
UDR=a;
  56:	8c b9       	out	0x0c, r24	; 12
while((UCSRA&(1<<TXC))==0);
  58:	5e 9b       	sbis	0x0b, 6	; 11
  5a:	fe cf       	rjmp	.-4      	; 0x58 <__SREG__+0x19>
UCSRA=1<<TXC;
  5c:	9b b9       	out	0x0b, r25	; 11
  5e:	f5 cf       	rjmp	.-22     	; 0x4a <__SREG__+0xb>

00000060 <_exit>:
  60:	f8 94       	cli

00000062 <__stop_program>:
  62:	ff cf       	rjmp	.-2      	; 0x62 <__stop_program>
